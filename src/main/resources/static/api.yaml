openapi: "3.0.0"
info:
  version: "1"
  title: darfichraus.de API
servers:
  - url: https://api.darfichraus.de
    description: production instance
  - url: https://api.dev.crimsy.tech
    description: development instance
security:
  - ApiKeyAuth: []
tags:
  - name: restrictions
    description: Everything about a restriction
  - name: restrictionsByAreal
    description: Get restrictions by specific areal
  - name: additionalInformation
    description: further information for states, categories, etc.
  - name: subscription
    description: Allow users to subscribe (for notifications)
  - name: WebResources_Public
    description: get WebResources
  - name: login
    description: Login
  - name: admin
    description: Everything you can change
  - name: userManagement
    description: Administrate user and user information
  - name: manageSubscription
    description: Manage subscriptions
  - name: situationTypes_Public
    description: Retrieve Situation Type(s)
  - name: situationTypes_Admin
    description: Manage specific Situation Type
  - name: situations_Public
    description: Retrieve Situation(s)
  - name: situations_Admin
    description: Manage specific situation
  - name: situationMessageTypes_Public
    description: Retrieve Situation Message Type(s)
  - name: situationMessageTypes_Admin
    description: Manage specific SituationMessage Type
  - name: situationMessages_Public
    description: Retrieve Situation Message(s)
  - name: situationMessages_Admin
    description: Manage specific Sitauation Message
  - name: situationReferences_Public
    description: Retrieve Situation Reference(s)
  - name: situationReferences_Admin
    description: Manage specific SituationReference
  - name: situationCategories_Public
    description: Retrieve Situation Categories
  - name: situationCategories_Admin
    description: Manage specific SituationCategory
  - name: WebResources_Admin
    description: Manage WebResources
  - name: healthInformation
    description: Returns geolocation based information about the current disease and its effects onto the population

paths:
  /restrictions:
    get:
      tags:
        - restrictions
      operationId: getAllValidRestrictions
      summary: Get all published valid restrictions possibly
      responses:
        '200':
          description: List of all restrictions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restrictions'
    post:
      tags:
        - restrictions
      operationId: addRestriction
      summary: adds a restriction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restriction'
      responses:
        '204':
          description: successfully added Restriction
  /restrictions/{id}:
    get:
      tags:
        - restrictions
      operationId: getRestrictionById
      summary: Get restrictions for specific id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Restrictions for given areal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restriction'
  /restrictions/{areal}/{arealIdentifier}:
    get:
      tags:
        - restrictionsByAreal
      operationId: getRestrictionsByArealAndArealIdentifier
      summary: Get restrictions for specific areal and arealIdentifier possibly filtered by a RestrictionState
      parameters:
        - in: path
          name: areal
          schema:
            $ref: '#/components/schemas/Areal'
          required: true
          example: 'STATE'
        - in: path
          name: arealIdentifier
          schema:
            type: string
          required: true
          example: 'Bayern'
      responses:
        '200':
          description: Restrictions for given areal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restrictions'
  /additionalInformation/{category}:
    get:
      tags:
        - additionalInformation
      operationId: getAdditionalInformationForCategory
      parameters:
        - in: path
          name: category
          schema:
            type: string
          required: true
          example: 'Bayern'
      responses:
        '200':
          description: additional information for given category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInformationCategory'
  /additionalInformation:
    get:
      tags:
        - additionalInformation
      operationId: getAdditionalInformation
      responses:
        '200':
          description: all additional information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInformationCategories'
  /subscriptions:
    post:
      tags:
        - subscription
      operationId: addSubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        '204':
          description: successfully added additional information

  /subscriptions/{id}:
    delete:
      tags:
        - subscription
      operationId: deleteSubscription
      summary: deletes a Subscription
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: successfully deleted Subscription

  /login:
    post:
      tags:
        - login
      operationId: authenticateUser
      summary: get jwt token for credentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: jwt token for user
          content:
            text/plain:
              schema:
                type: string
                example: my-long-jwt-token

  /admin/restrictions:
    get:
      tags:
        - admin
      security:
        - BearerAuth: []
      operationId: getAllRestrictions
      summary: Get all published restrictions
      responses:
        '200':
          description: List of all restrictions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restrictions'
    put:
      tags:
        - admin
      security:
        - BearerAuth: []
      operationId: updateRestriction
      summary: updates a restriction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restriction'
      responses:
        '204':
          description: successfully updated Restriction

  /admin/restrictions/{id}:
    delete:
      tags:
        - admin
      security:
        - BearerAuth: []
      operationId: deleteRestriction
      summary: deletes a restriction
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: successfully deleted Restriction

  /admin/additionalInformation:
    post:
      tags:
        - admin
      security:
        - BearerAuth: []
      operationId: addAdditionalInformationToCategory
      parameters:
        - in: path
          name: category
          schema:
            type: string
          required: true
          example: 'Bayern'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalInformation'
      responses:
        '200':
          description: successfully added additional information
  /admin/subscriptions/{areal}/{arealIdentifier}:
    get:
      tags:
        - admin
      operationId: getSubscriptionsByArealAndArealIdentifier
      summary: Get subscriptions for specific areal and arealIdentifier
      parameters:
        - in: path
          name: areal
          schema:
            $ref: '#/components/schemas/Areal'
          required: true
          example: 'STATE'
        - in: path
          name: arealIdentifier
          schema:
            type: string
          required: true
          example: 'Bayern'
      responses:
        '200':
          description: Subscriptions for given areal and arealIdentifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriptions'
  /admin/subscriptions:
    get:
      tags:
        - manageSubscription
      operationId: getAllSubscriptions
      summary: Get all subscriptions
      responses:
        '200':
          description: List of all restrictions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriptions'
  /admin/users:
    get:
      tags:
        - userManagement
      security:
        - BearerAuth: []
      operationId: getProfiles
      summary: gets all users
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'


  /admin/users/{email}:
    delete:
      tags:
        - userManagement
      security:
        - BearerAuth: []
      operationId: deleteUser
      parameters:
        - in: path
          name: email
          schema:
            type: string
            format: email
          required: true
          example: 'te@st.de'
      responses:
        '204':
          description: successfully deleted user
  /admin/users/passwordReset:
    patch:
      tags:
        - userManagement
      security:
        - BearerAuth: []
      operationId: changePassword
      summary: change User password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '204':
          description: successfully deleted user
  /admin/users/register:
    post:
      tags:
        - userManagement
      security:
        - BearerAuth: []
      operationId: registerUser
      summary: adds a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsWithRoles'
      responses:
        '204':
          description: successfully added user
  /admin/users/editUser:
    post:
      tags:
        - userManagement
      security:
        - BearerAuth: []
      operationId: editUser
      summary: edits a user profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: successfully added user

  /situation-advisor/situation-types:
    get:
      tags:
        - situationTypes_Public
      operationId: getSituationTypes
      summary: returns a list of all situation types
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SituationType'

  /situation-advisor/situation-types/{id}:
    get:
      tags:
        - situationTypes_Public
      operationId: getSituationType
      summary: Get specific Situation Type
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: return a specific Situation Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationType'

  /situation-advisor/situation-types/{id}/situations:
    get:
      tags:
        - situationTypes_Public
      operationId: getAllSituationForSituationType
      summary: Get specific Situation Type
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: return a list with all Situations by this type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationsBySituationTypeResponse'

  /admin/situation-advisor/situation-types:
    post:
      tags:
        - situationTypes_Admin
      security:
        - BearerAuth: []
      operationId: addSituationType
      summary: adds a new Situation Type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SituationType'
      responses:
        '204':
          description: Situation Type successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationType'
    put:
      tags:
        - situationTypes_Admin
      security:
        - BearerAuth: []
      operationId: updateSituationType
      summary: Updates a Situation Type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SituationType'
      responses:
        '204':
          description: Situation Type successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationType'

  /admin/situation-advisor/situation-types/{id}:
    delete:
      tags:
        - situationTypes_Admin
      security:
        - BearerAuth: []
      operationId: deleteSituationType
      summary: Deletes a Situation Type
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Situation Type successfully deleted

  /situation-advisor/situations:
    get:
      tags:
        - situations_Public
      security:
        - BearerAuth: []
      operationId: getAllSituations
      summary: Retrieves a list with all situations
      responses:
        '200':
          description: List of all situations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Situation'

  /situation-advisor/situations/{id}:
    get:
      tags:
        - situations_Public
      operationId: getSituation
      summary: Get specific Situation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: return a specific Situation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Situation'

  /situation-advisor/situations/{id}/situation-messages:
    get:
      tags:
        - situations_Public
      operationId: getAllSituationMessagesForSituation
      summary: Get all situation-messages for specific Situation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: query
          name: resolved
          schema:
            type: boolean
          required: false
      responses:
        '200':
          description: return a specific Situation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationMessagesBySituationResponse'

  /admin/situation-advisor/situations:
    post:
      tags:
        - situations_Admin
      security:
        - BearerAuth: []
      operationId: addSituation
      summary: Creates a new situation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Situation'
      responses:
        '204':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Situation'

    put:
      tags:
        - situations_Admin
      security:
        - BearerAuth: []
      operationId: updateSituation
      summary: Updates a situation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Situation'
      responses:
        '204':
          description: Update of Situation successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Situation'

  /admin/situation-advisor/situations/{id}:
    delete:
      tags:
        - situations_Admin
      security:
        - BearerAuth: []
      operationId: deleteSituation
      summary: Deletes a Situation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Situation successfully deleted

  /situation-advisor/situations-message-types:
    get:
      tags:
        - situationMessageTypes_Public
      security:
        - BearerAuth: []
      operationId: getAllSituationMessageTypes
      summary: Retrieves a list with all Situation Message Types
      responses:
        '200':
          description: List of all Situation Message Types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SituationMessageType'

  /situation-advisor/situation-message-types/{id}:
    get:
      tags:
        - situationMessageTypes_Public
      operationId: getSituationMessageType
      summary: Get specific Situation Message Type
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: return a specific Situation Message Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationMessageType'

  /admin/situation-advisor/situation-message-types:
    post:
      tags:
        - situationMessageTypes_Admin
      security:
        - BearerAuth: []
      operationId: addSituationMessageType
      summary: Creates a new Situation Message Type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SituationMessageType'
      responses:
        '204':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationMessageType'
    put:
      tags:
        - situationMessageTypes_Admin
      security:
        - BearerAuth: []
      operationId: updateSituationMessageType
      summary: Updates a Situation Message Type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SituationMessageType'
      responses:
        '204':
          description: Update of Situation Message Type successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationMessageType'

  /admin/situation-advisor/situation-message-types/{id}:
    delete:
      tags:
        - situationMessageTypes_Admin
      security:
        - BearerAuth: []
      operationId: deleteSituationMessageType
      summary: Deletes a Situation Message Type
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Situation Message Type successfully deleted

  /situation-advisor/situation-messages:
    get:
      tags:
        - situationMessages_Public
      security:
        - BearerAuth: []
      operationId: getAllSituationMessages
      summary: Retrieves a list with all Situation Messages
      parameters:
        - in: query
          name: lastRequest
          description: "Retrieve only the delta of information since last requst"
          required: false
          example: "2020-05-04T16:01:37.933Z"
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of all Situation Messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SituationMessageResponse'

  /situation-advisor/situation-messages/{id}:
    get:
      tags:
        - situationMessages_Public
      operationId: getSituationMessage
      summary: Get specific Situation Message
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: return a specific Situation Message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationMessageResponse'

  /admin/situation-advisor/situation-messages:
    post:
      tags:
        - situationMessages_Admin
      security:
        - BearerAuth: []
      operationId: addSituationMessage
      summary: Creates a new Situation Message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SituationMessage'
      responses:
        '204':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationMessage'

    put:
      tags:
        - situationMessages_Admin
      security:
        - BearerAuth: []
      operationId: updateSituationMessage
      summary: Updates a Situation Message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SituationMessage'
      responses:
        '204':
          description: Update of Situation Message successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationMessage'

  /admin/situation-advisor/situation-messages/{id}:
    delete:
      tags:
        - situationMessages_Admin
      security:
        - BearerAuth: []
      operationId: deleteSituationMessage
      summary: Deletes a Situation Message
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Situation Message successfully deleted

  /situation-advisor/situation-references:
    get:
      tags:
        - situationReferences_Public
      security:
        - BearerAuth: []
      operationId: getAllSituationReferences
      summary: Retrieves a list with all Situation References
      responses:
        '200':
          description: List of all Situation References
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SituationReference'

  /situation-advisor/situation-references/{id}:
    get:
      tags:
        - situationReferences_Public
      operationId: getSituationReference
      summary: Get specific Situation Reference
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: return a specific Situation Reference
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationReference'

  /admin/situation-advisor/situation-references:
    post:
      tags:
        - situationReferences_Admin
      security:
        - BearerAuth: []
      operationId: addSituationReference
      summary: Creates a new Situation Reference
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SituationReference'
      responses:
        '204':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationReference'

    put:
      tags:
        - situationReferences_Admin
      security:
        - BearerAuth: []
      operationId: updateSituationReference
      summary: Updates a Situation Reference
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SituationReference'
      responses:
        '204':
          description: Update of Situation Reference successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationReference'

  /admin/situation-advisor/situation-references/{id}:
    delete:
      tags:
        - situationReferences_Admin
      security:
        - BearerAuth: []
      operationId: deleteSituationReference
      summary: Deletes a Situation Reference
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Situation Reference successfully deleted

  /situation-advisor/situation-categories:
    get:
      tags:
        - situationCategories_Public
      security:
        - BearerAuth: []
      operationId: getAllSituationCategories
      summary: Retrieves a list with all Situation Categories
      responses:
        '200':
          description: List of all Situation Categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SituationCategory'

  /situation-advisor/situation-categories/{id}:
    get:
      tags:
        - situationCategories_Public
      operationId: getSituationCategory
      summary: Get specific Situation Category
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: return a specific Situation Category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationCategory'

  /situation-advisor/situation-categories/{id}/situation-messages:
    get:
      tags:
        - situationCategories_Public
      operationId: getSituationMessagesBySituationCategory
      summary: Get all Situation Messages for a specific Situation Category
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: return a list of Situation Messages by Situation Category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SituationMessagesBySituationCategoryResponse'


  /webresources/{id}:
    get:
      tags:
        - WebResources_Public
      operationId: getWebResourcesById
      summary: Get WebResource by Id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: return a specific WebResource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebResource'
  /webresources/{id}/download:
    get:
      tags:
        - WebResources_Public
      operationId: getRawWebResourcesById
      summary: download resource by Id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: return a raw specific WebResource
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary


  /admin/webresources:
    post:
      tags:
        - WebResources_Admin
      security:
        - BearerAuth: []
      operationId: addWebResource
      summary: Saves a file to the database
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Created successfully, returns id
          content:
            text/plain:
              schema:
                type: string
    get:
      tags:
        - WebResources_Admin
      security:
        - BearerAuth: []
      operationId: getAllWebResources
      parameters:
        - in: query
          name: includeFiles
          description: "include files in response"
          required: false
          example: "true"
          schema:
            type: boolean
      summary: get all resources stored in db
      responses:
        '200':
          description: all resources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebResource'

  /admin/webresources/{id}:
    delete:
      tags:
        - WebResources_Admin
      security:
        - BearerAuth: []
      operationId: deleteWebResource
      summary: Deletes a WebResource
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: WebResource successfully deleted


  /admin/situation-advisor/situation-categories:
    post:
      tags:
        - situationCategories_Admin
      security:
        - BearerAuth: []
      operationId: addSituationCategory
      summary: Creates a new Situation Category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SituationCategory'
      responses:
        '204':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationCategory'

    put:
      tags:
        - situationCategories_Admin
      security:
        - BearerAuth: []
      operationId: updateSituationCategory
      summary: Updates a Situation Category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SituationCategory'
      responses:
        '204':
          description: Update of Situation Category successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationCategory'

  /admin/situation-advisor/situation-categories/{id}:
    delete:
      tags:
        - situationCategories_Admin
      security:
        - BearerAuth: []
      operationId: deleteSituationCategory
      summary: Deletes a Situation Category
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Situation Category successfully deleted

  /geodata/by-zip/{zip}:
    get:
      tags:
        - locationFinder
      operationId: findLocationsByZip
      summary: "Find all Location-Information for specific ZIP. Will return a list of Locations to resolve from loweste layer (city/ZIP) to highest (country). So the layerorder is ZIP -> COUNTY -> STATE -> COUNTRY"
      parameters:
        - in: path
          name: zip
          schema:
            type: string
          required: true
      responses:
        '200':
          description: "A list with all layers and/or matches"
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/LocationResponse'

  /geodata/by-zip-part/{zip}:
    get:
      tags:
        - locationFinder
      operationId: findLocationsByZipLike
      summary: "Find all Location-Information for ZIP part. Type ahead feature."
      parameters:
        - in: path
          name: zip
          schema:
            type: string
          required: true
      responses:
        '200':
          description: "A list with all matching ZIP part"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZipSearchResponse'

  /health-information/by-zip/{zip}:
    get:
      tags:
        - healthInformation
      operationId: getHealthInformationByZip
      summary: "Returns ZIP based health information"
      parameters:
        - in: path
          name: zip
          schema: 
            type: string
          required: true
      responses:
        '200':
          description: "Health-Information based on ZIP"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthInformationResponse'



components:
  schemas:
    Restriction:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          required:
            - areal
            - arealIdentifier
            - restrictionState
            - restrictionType
            - restrictionStart
            - restrictionEnd
            - recipient
            - publisher
            - restrictionDescription
            - shortDescription
          properties:
            areal:
              $ref: '#/components/schemas/Areal'
            arealIdentifier:
              type: string
            restrictionType:
              $ref: '#/components/schemas/RestrictionType'
            restrictionState:
              $ref: '#/components/schemas/RestrictionState'
            shortDescription:
              type: string
              description: 'Give a short excerpt, why the restriction is active'
              example: 'There are zombies everywhere'
            restrictionDescription:
              type: string
              description: 'Full styled text to give a closer look to the restriction.'
            restrictionStart:
              type: string
              format: date
              description: 'Start of restriction'
              example: '2020-03-21'
            restrictionEnd:
              type: string
              format: date
              description: 'End of restriction'
              example: '2020-03-21'
            recipient:
              type: string
              description: 'affected group of citizens'
              example: 'Schüler'
            publisher:
              type: string
              description: 'source of information'
              example: 'Regierung'
            furtherInformation:
              type: string
              description: 'Further information for snoopy people'
              example: 'http://link/to/more/information'
            verified:
              type: boolean
              description: 'whether this restriction has been verified yet'
              default: false

    Restrictions:
      type: array
      items:
        $ref: '#/components/schemas/Restriction'

    Areal:
      description: 'A restriction can be city-based (zip), county based (Landkreis), for the whole state (Bayern) or countrywide (country)'
      type: string
      enum:
        - ZIP
        - COUNTY
        - STATE
        - COUNTRY
    Role:
      description: 'Roles used in the app'
      type: string
      enum:
        - ROLE_ADMIN
        - ROLE_COLLABORATOR
        - ROLE_USER
    CredentialsWithRoles:
      allOf:
        - $ref: '#/components/schemas/Credentials'
        - type: object
          required:
            - roles
          properties:
            roles:
              type: array
              items:
                $ref: '#/components/schemas/Role'

    Credentials:
      type: object
      description: 'user credentials for login'
      required:
        - username
        - password
      properties:
        username:
          type: string
          format: email
        password:
          type: string
          format: password
    User:
      type: object
      description: 'user info object'
      required:
        - username
        - roles
      properties:
        username:
          type: string
          format: email
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'

    RestrictionType:
      description: 'A restriction can affect one of these  areas of public life'
      type: string
      enum:
        - GENERAL_INFORMATION
        - PUBLIC_TRANSPORTATION
        - EVENTS_AND_ASSEMBLIES
        - GASTRONOMY
        - PUBLIC_PLACES
        - RETAIL
        - CURFEW

    RestrictionState:
      description: 'Describes severeness of restriction'
      type: string
      enum:
        - BAN
        - RESTRICTION
    AdditionalInformationCategories:
      type: array
      items:
        $ref: '#/components/schemas/AdditionalInformationCategory'

    AdditionalInformationCategory:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          required:
            - category
            - additionalInformation
          properties:
            additionalInformation:
              $ref: '#/components/schemas/AdditionalInformation'
            category:
              type: string

    AdditionalInformation:
      type: object
      additionalProperties:
        type: string

    Subscriptions:
      type: array
      items:
        $ref: '#/components/schemas/Subscription'

    Subscription:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          required:
            - email
            - areal
            - arealIdentifier
            - contactAllowed
          properties:
            email:
              type: string
              example: 'a@b.com'
            areal:
              $ref: '#/components/schemas/Areal'
            arealIdentifier:
              type: string
            types:
              type: array
              items:
                $ref: '#/components/schemas/RestrictionType'
    WebResource:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          required:
            - file
            - contentType
            - fileName
          properties:
            file:
              type: string
              format: byte
              description: Base64-encoded contents of uploaded file
            contentType:
              type: string
            fileName:
              type: string

    SituationType:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - required:
            - name
            - description
            - severity
        - type: object
          description: "This object allows to categorize Situations into high level crysis."
          properties:
            name:
              type: string
              description: "Classifier."
              example: "Pandemie"
            description:
              type: string
              example: "Ausbruch einer Krankheit. Betrifft den gesamten Globus"
            severity:
              $ref: '#/components/schemas/SituationSeverity'
            media:
              type: string
              example: "virus.png"

    Situation:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          description: "A Situation is a current crysis."
          required:
            - name
            - startDate
            - severity
          properties:
            name:
              type: string
              description: "Describes the situation; like a title"
              example: "Corona/Covid-19"
            situationTypeId:
              type: string
              description: "Id of situation-type"
            startDate:
              type: string
              format: date
              description: "Start of the situation/crysis"
              example: "2020-01-01"
            endDate:
              type: string
              format: date
              nullable: true
              description: "End of situation/crysis"
              example: "2020-12-31"
            severity:
              $ref: '#/components/schemas/SituationSeverity'
            active:
              type: boolean
              default: true
              description: "Toggles the afffectness of a situation/crysis. False will not trigger any action to a system/user (e. g. push notification)"

    SituationMessageType:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          description: "Classifies a SituationMessage into a type. Has impact to icon, coloring, severity of messages their handling"
          required:
            - name
            - severity
            - color
          properties:
            name:
              type: string
              description: "Speakable type of Type"
              example: "Restrictive Instruktion"
            media:
              type: string
              description: "Icon"
              example: "exclamation-mark.svg"
            severity:
              $ref: '#/components/schemas/SituationSeverity'
            color:
              type: string
              description: "Provides the possibility to annotate messages/headers with MessageType-based color; preferred HEX value"
              example: "orange"

    SituationMessage:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          description: "Represents an instruction or an information to recipients or systems."
          required:
            - situationId
            - messageTypeId
            - title
            - message
            - abstract
            - severity
          properties:
            situationId:
              type: string
              description: "Sorts the message to a situation/crysis"
              example: "5eaf148a0d077d75108087d3"
            messageTypeId:
              type: string
              description: "Classifies the Message as type of e.g. Restrictive-Instruction; inherits color schema, severity, etc."
              example: "5eaf17692c1f4e9671ec7111"
            title:
              type: string
              description: "Quick information/abstract about the message"
              example: "Wearing a face mask is mandatory!"
            message:
              type: string
              description: "Whole information. Fully formatable."
              example: "By start of April, 20th 2020 you have to wear a face mask in supermarkets and all shop-alike stores."
            excerpt:
              type: string
              description: "Short text (excerpt) from the whole message"
              example: "Please wear a face mask in shopping stores"
            icon:
              type: string
              description: "Icon"
              example: "mask.svg"
            severity:
              $ref: '#/components/schemas/SituationSeverity'
            documents:
              type: array
              items:
                type: string
                description: "Reference to an object of Situation Reference"
            areaOfEffect:
              type: array
              description: "A list of all GeoJson-Ids, where the Situation is taking place/is affected"
              items:
                type: string
            affectedCategories:
              type: array
              items:
                type: string
                description: "A list with all categories, the situation message is related to."
            status:
              $ref: '#/components/schemas/SituationMessageStatus'
            version:
              type: number
              description: "Every change increments the version. Full history possible"

    SituationReference:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          description: "References to source of information"
          properties:
            title:
              type: string
              description: "Allows to describe the source/reference"
              example: "How to wear a face mask?"
            type:
              $ref: '#/components/schemas/SituationReferenceType'
            classifier:
              $ref: '#/components/schemas/SituationReferenceClassifier'
            source:
              type: string
              description: "points to the source"
              example: "http://darfichraus.de/mask-mandatory.pdf"

    SituationReferenceType:
      description: "Type of reference to build type-based-action"
      type: string
      enum:
        - URL
        - FILE
        - PICTURE
        - VIDEO
        - VOICE
        - OTHER

    SituationReferenceClassifier:
      description: "Classifies the reference as type of"
      type: string
      enum:
        - ATTACHMENT
        - SOURCE
        - OTHER

    SituationMessageStatus:
      description: "Get information about the status"
      type: string
      enum:
        - DRAFT
        - APPROVED
        - REVOKED
        - OTHER

    SituationSeverity:
      description: "Describes the severity of a subject"
      type: integer
      format: int32
      minimum: 1
      maximum: 5

    SituationMessageResponse:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          description: "A Situation Message with internally all entities resolved"
          properties:
            situation:
              $ref: '#/components/schemas/Situation'
            messageType:
              $ref: '#/components/schemas/SituationMessageType'
            title:
              type: string
              description: "Quick information/abstract about the message"
              example: "Wearing a face mask is mandatory!"
            message:
              type: string
              description: "Whole information. Fully formatable."
              example: "By start of April, 20th 2020 you have to wear a face mask in supermarkets and all shop-alike stores."
            excerpt:
              type: string
              description: "Short text (excerpt) from the whole message"
              example: "Please wear a face mask in shopping stores"
            icon:
              type: string
              description: "Icon"
              example: "mask.svg"
            severity:
              $ref: '#/components/schemas/SituationSeverity'
            documents:
              type: array
              items:
                $ref: '#/components/schemas/SituationReference'
            areaOfEffect:
              type: array
              description: "A list of all GeoJson-Ids, where the Situation is taking place/is affected"
              items:
                type: string
            affectedCategories:
              type: array
              items:
                $ref: '#/components/schemas/SituationCategory'
            status:
              $ref: '#/components/schemas/SituationMessageStatus'
            version:
              type: number
              description: "Every change increments the version. Full history possible"


    SituationCategory:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          description: "Helps to clearify and cluster information"
          properties:
            name:
              type: string
              example: "Public Transportation"
              description: "Names the category"
            info:
              type: string
              example: "Information about train, highways, busses, etc."
              description: "Short explanation of the category"
            icon:
              type: string
              example: "bus.png"
              description: "Remarkable Symbol"
            color:
              type: string
              example: "blue"
              description: "Color; preferred is HEX value"
            active:
              type: boolean
              default: True
              example: False
              description: "Enables/disables the functionality/listing of the category"

    SituationMessagesBySituationResponse:
      type: object
      description: "Full resolved object of Situation and its Messages"
      properties:
        situation:
          $ref: '#/components/schemas/Situation'
        situationMessages:
          type: array
          items:
            $ref: '#/components/schemas/SituationMessageResponse'

    SituationsBySituationTypeResponse:
      type: object
      description: "Full resolved object of Situations by Situation Type"
      properties:
        situationType:
          $ref: '#/components/schemas/SituationType'
        situations:
          type: array
          items:
            $ref: '#/components/schemas/Situation'

    SituationMessagesBySituationCategoryResponse:
      type: object
      description: "Full resolved object of Situation Messages by Situation Category"
      properties:
        situationCategory:
          $ref: '#/components/schemas/SituationCategory'
        situationMessages:
          type: array
          items:
            $ref: '#/components/schemas/SituationMessageResponse'

    Location:
      type: object
      description: "Returns all relevant information about a location"
      properties:
        name:
          type: string
          description: "Name of the Location"
          example: "Bad Aibling"
        locationType:
          $ref: '#/components/schemas/LocationType'
        geoId:
          type: string
          description: "Links to the GeoJson-Id"

    CityInformation:
      type: object
      description: "Returns information of a city"
      properties:
        city: 
          type: string
          description: "Name of the City"
          example: "Bad Aibling"
        zip:
          type: string
          description: "ZIP code of the City"
          example: "83043"
        county:
          type: string
          description: "Name of County, the City is in"
          example: "Landkreis Rosenheim"
        state: 
          type: string
          description: "Name of the State, the City is in"
          example: "Bayern"
        country:
          type: string
          description: "Name of the Country, the City is in"
          example: "Deutschland"


    LocationType:
      type: string
      enum:
        - CITY
        - COUNTY
        - ADMINISTRATIVE_AREA
        - STATE
        - COUNTRY

    LocationResponse:
      type: object
      description: "Result for a Location Lookup"
      properties:
        city:
          $ref: '#/components/schemas/CityInformation'
        hierarchy:
          type: array
          items:
            $ref: '#/components/schemas/Location'

    ZipSearchResponse:
      type: object
      description: "Returns a list with all matching Cities."
      properties:
        zip-part:
          type: string
          description: "Returns the search part"
          example: "830"
        count:
          type: integer
          description: "Count of matching cities"
          example: 42
        cities:
          type: array
          description: "List with all matches"
          items:
            $ref: '#/components/schemas/CityInformation'

    HealthInformationResponse:
      type: object
      description: "Information about diseases at Geo-Location"
      properties:
        location:
          $ref: '#/components/schemas/CityInformation'
        healthInformation:
          type: array
          items:
            $ref: '#/components/schemas/HealthInformation'

    HealthInformation:
      type: object
      description: "Information about current disease"
      properties:
        gen:
          type: string
          description: "Name of Geo-Location"
          example: "Rosenheim"
        bez: 
          type: string
          description: "Prefix of Geo-Location"
          example: "Landkreis"
        ewz:
          type: integer
          description: "Population of Geo-Location"
          example: 260983
        deathRate:
          type: number
          format: double
          description: "Rate of death, based on population"
          example: 7.29893072989307
        cases:
          type: integer
          description: "Number of infacted people"
          example: 2151
        deaths:
          type: integer
          description: "Number of people passed away, caused by disease"
          example: 157
        casesPer100k:
          type: number
          format: double
          description: "Infected people per population of 100.000"
          example: 824.191614013173
        casesPerPopulation:
          type: number
          format: double
          description: ""
          example: 0.824191614013173
        bl:
          type: string
          description: "Name of State"
          example: "Bayern"
        county:
          type: string
          description: "Qualified name of Geo-Location"
          example: "LK Rosenheim"
        lastUpdate:
          type: string
          description: "Latest update"
          example: "11.05.2020, 00:00 Uhr"
        cases7Per100k:
          type: number
          format: double
          description: "Critical value to determine how fast the disease spreads and the Geo-Location is close to a lock down"
          example: 29.5038374146975
        districtType:
          type: string
          description: "Specifies the type of Geo-Location"
          example: "Landkreis"
        

    BaseEntity:
      type: object
      discriminator:
        propertyName: Entity
      properties:
        id:
          type: string
        modified:
          type: string
          format: date-time
          description: 'when this entity has been last modified'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: 'API-KEY'
      description: 'Api-Key needed to authenticate requests'
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
