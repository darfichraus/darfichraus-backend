openapi: "3.0.0"
info:
  version: "1"
  title: darfichraus.de API
servers:
  - url: https://api.darfichraus.de
    description: production instance
  - url: https://api.dev.crimsy.tech
    description: development instance
security:
  - ApiKeyAuth: []
paths:
  /restrictions:
    get:
      operationId: getAllValidRestrictions
      summary: Get all published valid restrictions possibly
      responses:
        '200':
          description: List of all restrictions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restrictions'
    post:
      operationId: addRestriction
      summary: adds a restriction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restriction'
      responses:
        '204':
          description: successfully added Restriction
  /restrictions/{areal}/{arealIdentifier}:
    get:
      operationId: getRestrictionsByArealAndArealIdentifier
      summary: Get restrictions for specific areal and arealIdentifier possibly filtered by a RestrictionState
      parameters:
        - in: path
          name: areal
          schema:
            $ref: '#/components/schemas/Areal'
          required: true
          example: 'STATE'
        - in: path
          name: arealIdentifier
          schema:
            type: string
          required: true
          example: 'Bayern'
      responses:
        '200':
          description: Restrictions for given areal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restrictions'
  /restrictions/{id}:
    get:
      operationId: getRestrictionById
      summary: Get restrictions for specific id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Restrictions for given areal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restriction'
  /additionalInformation/{category}:
    get:
      operationId: getAdditionalInformationForCategory
      parameters:
        - in: path
          name: category
          schema:
            type: string
          required: true
          example: 'Bayern'
      responses:
        '200':
          description: additional information for given category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInformationCategory'
  /additionalInformation:
    get:
      operationId: getAdditionalInformation
      responses:
        '200':
          description: all additional information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInformationCategories'
  /login:
    post:
      operationId: authenticateUser
      summary: get jwt token for credentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: jwt token for user
          content:
            text/plain:
              schema:
                type: string
                example: my-long-jwt-token

  /admin/restrictions:
    delete:
      security:
        - BearerAuth: []
      operationId: deleteRestriction
      summary: deletes a restriction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restriction'
      responses:
        '204':
          description: successfully deleted Restriction
    get:
      security:
        - BearerAuth: []
      operationId: getAllRestrictions
      summary: Get all published restrictions
      responses:
        '200':
          description: List of all restrictions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restrictions'
    put:
      security:
        - BearerAuth: []
      operationId: updateRestriction
      summary: updates a restriction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restriction'
      responses:
        '204':
          description: successfully updated Restriction
  /admin/additionalInformation:
    post:
      security:
        - BearerAuth: []
      operationId: addAdditionalInformationToCategory
      parameters:
        - in: path
          name: category
          schema:
            type: string
          required: true
          example: 'Bayern'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalInformation'
      responses:
        '200':
          description: successfully added additional information
  /admin/subscriptions/{areal}/{arealIdentifier}:
    get:
      operationId: getSubscriptionsByArealAndArealIdentifier
      summary: Get subscriptions for specific areal and arealIdentifier
      parameters:
        - in: path
          name: areal
          schema:
            $ref: '#/components/schemas/Areal'
          required: true
          example: 'STATE'
        - in: path
          name: arealIdentifier
          schema:
            type: string
          required: true
          example: 'Bayern'
      responses:
        '200':
          description: Subscriptions for given areal and arealIdentifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriptions'
  /admin/subscriptions:
    get:
      operationId: getAllSubscriptions
      summary: Get all subscriptions
      responses:
        '200':
          description: List of all restrictions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriptions'
  /admin/users:
    get:
      security:
        - BearerAuth: []
      operationId: getProfiles
      summary: gets all users
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'


  /admin/users/{email}:
    delete:
      security:
        - BearerAuth: []
      operationId: deleteUser
      parameters:
        - in: path
          name: email
          schema:
            type: string
            format: email
          required: true
          example: 'te@st.de'
      responses:
        '204':
          description: successfully deleted user
  /admin/users/passwordReset:
    patch:
      security:
        - BearerAuth: []
      operationId: changePassword
      summary: change User password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '204':
          description: successfully deleted user
  /admin/users/register:
    post:
      security:
        - BearerAuth: []
      operationId: registerUser
      summary: adds a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsWithRoles'
      responses:
        '204':
          description: successfully added user
  /admin/users/editUser:
    post:
      security:
        - BearerAuth: []
      operationId: editUser
      summary: edits a user profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: successfully added user
  /subscriptions:
    post:
      operationId: addSubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        '204':
          description: successfully added additional information
    delete:
      operationId: deleteSubscription
      summary: deletes a Subscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        '204':
          description: successfully deleted Subscription



components:
  schemas:
    Restriction:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          required:
            - areal
            - arealIdentifier
            - restrictionState
            - restrictionType
            - restrictionStart
            - restrictionEnd
            - recipient
            - publisher
            - restrictionDescription
            - shortDescription
          properties:
            areal:
              $ref: '#/components/schemas/Areal'
            arealIdentifier:
              type: string
            restrictionType:
              $ref: '#/components/schemas/RestrictionType'
            restrictionState:
              $ref: '#/components/schemas/RestrictionState'
            shortDescription:
              type: string
              description: 'Give a short excerpt, why the restriction is active'
              example: 'There are zombies everywhere'
            restrictionDescription:
              type: string
              description: 'Full styled text to give a closer look to the restriction.'
            restrictionStart:
              type: string
              format: date
              description: 'Start of restriction'
              example: '2020-03-21'
            restrictionEnd:
              type: string
              format: date
              description: 'End of restriction'
              example: '2020-03-21'
            recipient:
              type: string
              description: 'affected group of citizens'
              example: 'Schüler'
            publisher:
              type: string
              description: 'source of information'
              example: 'Regierung'
            furtherInformation:
              type: string
              description: 'Further information for snoopy people'
              example: 'http://link/to/more/information'
            tags:
              type: array
              items:
                  type: string
              default:
                - ""
            verified:
              type: boolean
              description: 'whether this restriction has been verified yet'
              default: false
            insertedBy:
              type: string
              description: 'What system (could also be a User) added this information'
              default: 'unknown'
              example: 'feed-analyser'

    Restrictions:
      type: array
      items:
        $ref: '#/components/schemas/Restriction'

    Areal:
      description: 'A restriction can be city-based (zip), county based (Landkreis), for the whole state (Bayern) or countrywide (country)'
      type: string
      enum:
        - ZIP
        - COUNTY
        - STATE
        - COUNTRY
    Role:
      description: 'Roles used in the app'
      type: string
      enum:
        - ROLE_ADMIN
        - ROLE_COLLABORATOR
        - ROLE_USER
    CredentialsWithRoles:
      allOf:
        - $ref: '#/components/schemas/Credentials'
        - type: object
          required:
            - roles
          properties:
            roles:
              type: array
              items:
                $ref: '#/components/schemas/Role'

    Credentials:
      type: object
      description: 'user credentials for login'
      required:
        - username
        - password
      properties:
        username:
          type: string
          format: email
        password:
          type: string
          format: password
    User:
      type: object
      description: 'user info object'
      required:
        - username
        - roles
      properties:
        username:
          type: string
          format: email
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'

    RestrictionType:
      description: 'A restriction can affect one of these  areas of public life'
      type: string
      enum:
        - GENERAL_INFORMATION
        - PUBLIC_TRANSPORTATION
        - EVENTS_AND_ASSEMBLIES
        - GASTRONOMY
        - PUBLIC_PLACES
        - RETAIL
        - CURFEW
        - UNCLASSIFIED

    RestrictionTypes:
      description: 'A list of RestrictionType'
      type: array
      items:
        $ref: '#/components/schemas/RestrictionType'

    RestrictionState:
      description: 'Describes severeness of restriction'
      type: string
      enum:
        - BAN
        - RESTRICTION
        - ADVISE
        - WARNING
        - INFORMATION

    AdditionalInformationCategories:
      type: array
      items:
        $ref: '#/components/schemas/AdditionalInformationCategory'

    AdditionalInformationCategory:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          required:
            - category
            - additionalInformation
          properties:
            additionalInformation:
              $ref: '#/components/schemas/AdditionalInformation'
            category:
              type: string

    AdditionalInformation:
      type: object
      additionalProperties:
        type: string

    Subscriptions:
      type: array
      items:
        $ref: '#/components/schemas/Subscription'

    Subscription:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          required:
            - email
            - areal
            - arealIdentifier
            - contactAllowed
          properties:
            email:
              type: string
              example: 'a@b.com'
            areal:
              $ref: '#/components/schemas/Areal'
            arealIdentifier:
              type: string
            types:
              type: array
              items:
                $ref: '#/components/schemas/RestrictionType'
    BaseEntity:
      type: object
      discriminator:
        propertyName: Entity
      properties:
        id:
          type: string
        created:
          type: string
          format: date-time
          description: 'when this entity has been created'
        modified:
          type: string
          format: date-time
          description: 'when this entity has been last modified'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: 'API-KEY'
      description: 'Api-Key needed to authenticate requests'
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

