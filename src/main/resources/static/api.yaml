openapi: "3.0.0"
info:
  version: "1"
  title: darfichraus.de API
servers:
  - url: https://api.darfichraus.de
    description: production instance
  - url: https://api.dev.crimsy.tech
    description: development instance
security:
  - ApiKeyAuth: []
tags:
  - name: restrictions
    description: Everything about a restriction
  - name: restrictionsByAreal
    description: Get restrictions by specific areal
  - name: additionalInformation
    description: further information for states, categories, etc.
  - name: subscription
    description: Allow users to subscripe (for notifications)
  - name: login
    description: Login
  - name: admin
    description: Everything you can change
  - name: userManagement
    description: Administrate user and user information
  - name: manageSubscription
    description: Manage subscriptions
  - name: situationTypes
    description: Manage the Situation Type(s)
  - name: situationType
    description: Manage specific Situation Type
  - name: situations
    description: Manage all situations
  - name: situation
    description: Manage specific situation
  - name: situationMessageTypes
    description: Manage all Situation Message Types
  - name: situationMessageType
    description: Manage specific SituationMessage Types
  - name: situationMessages
    description: Manage all Situation Message
  - name: situationMessage
    description: Manage specific Sitauation Message
  - name: situationReferences
    description: Manage all Situation References
  - name: situationReference
    description: Manage specific SituationReference

paths:
  /restrictions:
    get:
      tags:
        - restrictions
      operationId: getAllValidRestrictions
      summary: Get all published valid restrictions possibly
      responses:
        '200':
          description: List of all restrictions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restrictions'
    post:
      tags:
        - restrictions
      operationId: addRestriction
      summary: adds a restriction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restriction'
      responses:
        '204':
          description: successfully added Restriction
  /restrictions/{id}:
    get:
      tags:
        - restrictions
      operationId: getRestrictionById
      summary: Get restrictions for specific id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Restrictions for given areal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restriction'
  /restrictions/{areal}/{arealIdentifier}:
    get:
      tags:
        - restrictionsByAreal
      operationId: getRestrictionsByArealAndArealIdentifier
      summary: Get restrictions for specific areal and arealIdentifier possibly filtered by a RestrictionState
      parameters:
        - in: path
          name: areal
          schema:
            $ref: '#/components/schemas/Areal'
          required: true
          example: 'STATE'
        - in: path
          name: arealIdentifier
          schema:
            type: string
          required: true
          example: 'Bayern'
      responses:
        '200':
          description: Restrictions for given areal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restrictions'
  /additionalInformation/{category}:
    get:
      tags:
        - additionalInformation
      operationId: getAdditionalInformationForCategory
      parameters:
        - in: path
          name: category
          schema:
            type: string
          required: true
          example: 'Bayern'
      responses:
        '200':
          description: additional information for given category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInformationCategory'
  /additionalInformation:
    get:
      tags:
        - additionalInformation
      operationId: getAdditionalInformation
      responses:
        '200':
          description: all additional information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdditionalInformationCategories'
  /subscriptions:
    post:
      tags:
        - subscription
      operationId: addSubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        '204':
          description: successfully added additional information
    delete:
      tags:
        - subscription
      operationId: deleteSubscription
      summary: deletes a Subscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        '204':
          description: successfully deleted Subscription

  /login:
    post:
      tags:
        - login
      operationId: authenticateUser
      summary: get jwt token for credentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: jwt token for user
          content:
            text/plain:
              schema:
                type: string
                example: my-long-jwt-token

  /admin/restrictions:
    delete:
      tags:
        - admin
      security:
        - BearerAuth: []
      operationId: deleteRestriction
      summary: deletes a restriction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restriction'
      responses:
        '204':
          description: successfully deleted Restriction
    get:
      tags:
        - admin
      security:
        - BearerAuth: []
      operationId: getAllRestrictions
      summary: Get all published restrictions
      responses:
        '200':
          description: List of all restrictions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restrictions'
    put:
      tags:
        - admin
      security:
        - BearerAuth: []
      operationId: updateRestriction
      summary: updates a restriction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restriction'
      responses:
        '204':
          description: successfully updated Restriction
  /admin/additionalInformation:
    post:
      tags:
        - admin
      security:
        - BearerAuth: []
      operationId: addAdditionalInformationToCategory
      parameters:
        - in: path
          name: category
          schema:
            type: string
          required: true
          example: 'Bayern'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdditionalInformation'
      responses:
        '200':
          description: successfully added additional information
  /admin/subscriptions/{areal}/{arealIdentifier}:
    get:
      tags:
        - admin
      operationId: getSubscriptionsByArealAndArealIdentifier
      summary: Get subscriptions for specific areal and arealIdentifier
      parameters:
        - in: path
          name: areal
          schema:
            $ref: '#/components/schemas/Areal'
          required: true
          example: 'STATE'
        - in: path
          name: arealIdentifier
          schema:
            type: string
          required: true
          example: 'Bayern'
      responses:
        '200':
          description: Subscriptions for given areal and arealIdentifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriptions'
  /admin/subscriptions:
    get:
      tags:
        - manageSubscription
      operationId: getAllSubscriptions
      summary: Get all subscriptions
      responses:
        '200':
          description: List of all restrictions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriptions'
  /admin/users:
    get:
      tags:
        - userManagement
      security:
        - BearerAuth: []
      operationId: getProfiles
      summary: gets all users
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'


  /admin/users/{email}:
    delete:
      tags:
        - userManagement
      security:
        - BearerAuth: []
      operationId: deleteUser
      parameters:
        - in: path
          name: email
          schema:
            type: string
            format: email
          required: true
          example: 'te@st.de'
      responses:
        '204':
          description: successfully deleted user
  /admin/users/passwordReset:
    patch:
      tags:
        - userManagement
      security:
        - BearerAuth: []
      operationId: changePassword
      summary: change User password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '204':
          description: successfully deleted user
  /admin/users/register:
    post:
      tags:
        - userManagement
      security:
        - BearerAuth: []
      operationId: registerUser
      summary: adds a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsWithRoles'
      responses:
        '204':
          description: successfully added user
  /admin/users/editUser:
    post:
      tags:
        - userManagement
      security:
        - BearerAuth: []
      operationId: editUser
      summary: edits a user profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: successfully added user

  /admin/situation-advisor/situation-types:
    get:
      tags:
        - situationTypes
      security:
        - BearerAuth: []
      operationId: getSituationTypes
      summary: returns a list of all situation types
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SituationType'
    post:
      tags:
        - situationTypes
      security:
        - BearerAuth: []
      operationId: addSituationType
      summary: adds a new Situation Type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SituationType'
      responses:
        '204':
          description: Situation Type successfully added

    put:
      tags:
        - situationTypes
      security:
        - BearerAuth: []
      operationId: updateSituationType
      summary: Updates a Situation Type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SituationType'
      responses:
        '204':
          description: Situation Type successfully updated
  /admin/situation-advisor/situation-types/{id}:
    get:
      tags:
        - situationType
      operationId: getSituationType
      summary: Get specific Situation Type
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: return a specific Situation Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationType'
    delete:
      tags:
        - situationType
      security:
        - BearerAuth: []
      operationId: deleteSituationType
      summary: Deletes a Situation Type
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Situation Type successfully deleted

  /admin/situation-advisor/situations:
    get:
      tags:
        - situations
      security:
        - BearerAuth: []
      operationId: getAllSituations
      summary: Retrieves a list with all situations
      responses:
        '200':
          description: List of all situations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Situation'
    post:
      tags:
        - situations
      security:
        - BearerAuth: []
      operationId: addSituation
      summary: Creates a new situation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Situation'
      responses:
        '204':
          description: Created successfully

    put:
      tags:
        - situations
      security:
        - BearerAuth: []
      operationId: updateSituation
      summary: Updates a situation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Situation'
      responses:
        '204':
          description: Update of Situation successfully

  /admin/situation-advisor/situation/{id}:
    get:
      tags:
        - situation
      operationId: getSituation
      summary: Get specific Situation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: return a specific Situation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Situation'
    delete:
      tags:
        - situation
      security:
        - BearerAuth: []
      operationId: deleteSituation
      summary: Deletes a Situation
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Situation successfully deleted

  /admin/situation-advisor/situations-message-types:
    get:
      tags:
        - situationMessageTypes
      security:
        - BearerAuth: []
      operationId: getAllSituationMessageTypes
      summary: Retrieves a list with all Situation Message Types
      responses:
        '200':
          description: List of all Situation Message Types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SituationMessageType'
    post:
      tags:
        - situationMessageTypes
      security:
        - BearerAuth: []
      operationId: addSituationMessageType
      summary: Creates a new Situation Message Type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SituationMessageType'
      responses:
        '204':
          description: Created successfully

    put:
      tags:
        - situationMessageTypes
      security:
        - BearerAuth: []
      operationId: updateSituationMessageType
      summary: Updates a Situation Message Type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SituationMessageType'
      responses:
        '204':
          description: Update of Situation Message Type successfully

  /admin/situation-advisor/situation-message-types/{id}:
    get:
      tags:
        - situationMessageType
      operationId: getSituationMessageType
      summary: Get specific Situation Message Type
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: return a specific Situation Message Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationMessageType'
    delete:
      tags:
        - situationMessageType
      security:
        - BearerAuth: []
      operationId: deleteSituationMessageType
      summary: Deletes a Situation Message Type
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Situation Message Type successfully

  /admin/situation-advisor/situations-messages:
    get:
      tags:
        - situationMessages
      security:
        - BearerAuth: []
      operationId: getAllSituationMessages
      summary: Retrieves a list with all Situation Messages
      parameters:
        - in: query
          name: lastRequest
          description: "Retrieve only the delta of information since last requst"
          required: false
          example: "2020-05-04T16:01:37.933Z"
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of all Situation Messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SituationMessage'
    post:
      tags:
        - situationMessages
      security:
        - BearerAuth: []
      operationId: addSituationMessage
      summary: Creates a new Situation Message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SituationMessage'
      responses:
        '204':
          description: Created successfully

    put:
      tags:
        - situationMessages
      security:
        - BearerAuth: []
      operationId: updateSituationMessage
      summary: Updates a Situation Message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SituationMessage'
      responses:
        '204':
          description: Update of Situation Message successfully

  /admin/situation-advisor/situation-messages/{id}:
    get:
      tags:
        - situationMessage
      operationId: getSituationMessage
      summary: Get specific Situation Message
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: return a specific Situation Message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationMessage'
    delete:
      tags:
        - situationMessage
      security:
        - BearerAuth: []
      operationId: deleteSituationMessage
      summary: Deletes a Situation Message
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Situation Message successfully

  /admin/situation-advisor/situations-references:
    get:
      tags:
        - situationReferences
      security:
        - BearerAuth: []
      operationId: getAllSituationReferences
      summary: Retrieves a list with all Situation References
      responses:
        '200':
          description: List of all Situation References
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SituationReference'
    post:
      tags:
        - situationReferences
      security:
        - BearerAuth: []
      operationId: addSituationReference
      summary: Creates a new Situation Reference
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SituationReference'
      responses:
        '204':
          description: Created successfully

    put:
      tags:
        - situationReferences
      security:
        - BearerAuth: []
      operationId: updateSituationReference
      summary: Updates a Situation Reference
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SituationReference'
      responses:
        '204':
          description: Update of Situation Message successfully

  /admin/situation-advisor/situation-references/{id}:
    get:
      tags:
        - situationReference
      operationId: getSituationReference
      summary: Get specific Situation Reference
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: return a specific Situation Reference
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SituationReference'
    delete:
      tags:
        - situationReference
      security:
        - BearerAuth: []
      operationId: deleteSituationReference
      summary: Deletes a Situation Reference
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Situation Reference successfully


components:
  schemas:
    Restriction:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          required:
            - areal
            - arealIdentifier
            - restrictionState
            - restrictionType
            - restrictionStart
            - restrictionEnd
            - recipient
            - publisher
            - restrictionDescription
            - shortDescription
          properties:
            areal:
              $ref: '#/components/schemas/Areal'
            arealIdentifier:
              type: string
            restrictionType:
              $ref: '#/components/schemas/RestrictionType'
            restrictionState:
              $ref: '#/components/schemas/RestrictionState'
            shortDescription:
              type: string
              description: 'Give a short excerpt, why the restriction is active'
              example: 'There are zombies everywhere'
            restrictionDescription:
              type: string
              description: 'Full styled text to give a closer look to the restriction.'
            restrictionStart:
              type: string
              format: date
              description: 'Start of restriction'
              example: '2020-03-21'
            restrictionEnd:
              type: string
              format: date
              description: 'End of restriction'
              example: '2020-03-21'
            recipient:
              type: string
              description: 'affected group of citizens'
              example: 'Schüler'
            publisher:
              type: string
              description: 'source of information'
              example: 'Regierung'
            furtherInformation:
              type: string
              description: 'Further information for snoopy people'
              example: 'http://link/to/more/information'
            verified:
              type: boolean
              description: 'whether this restriction has been verified yet'
              default: false

    Restrictions:
      type: array
      items:
        $ref: '#/components/schemas/Restriction'

    Areal:
      description: 'A restriction can be city-based (zip), county based (Landkreis), for the whole state (Bayern) or countrywide (country)'
      type: string
      enum:
        - ZIP
        - COUNTY
        - STATE
        - COUNTRY
    Role:
      description: 'Roles used in the app'
      type: string
      enum:
        - ROLE_ADMIN
        - ROLE_COLLABORATOR
        - ROLE_USER
    CredentialsWithRoles:
      allOf:
        - $ref: '#/components/schemas/Credentials'
        - type: object
          required:
            - roles
          properties:
            roles:
              type: array
              items:
                $ref: '#/components/schemas/Role'

    Credentials:
      type: object
      description: 'user credentials for login'
      required:
        - username
        - password
      properties:
        username:
          type: string
          format: email
        password:
          type: string
          format: password
    User:
      type: object
      description: 'user info object'
      required:
        - username
        - roles
      properties:
        username:
          type: string
          format: email
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'

    RestrictionType:
      description: 'A restriction can affect one of these  areas of public life'
      type: string
      enum:
        - GENERAL_INFORMATION
        - PUBLIC_TRANSPORTATION
        - EVENTS_AND_ASSEMBLIES
        - GASTRONOMY
        - PUBLIC_PLACES
        - RETAIL
        - CURFEW

    RestrictionState:
      description: 'Describes severeness of restriction'
      type: string
      enum:
        - BAN
        - RESTRICTION
    AdditionalInformationCategories:
      type: array
      items:
        $ref: '#/components/schemas/AdditionalInformationCategory'

    AdditionalInformationCategory:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          required:
            - category
            - additionalInformation
          properties:
            additionalInformation:
              $ref: '#/components/schemas/AdditionalInformation'
            category:
              type: string

    AdditionalInformation:
      type: object
      additionalProperties:
        type: string

    Subscriptions:
      type: array
      items:
        $ref: '#/components/schemas/Subscription'

    Subscription:
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          required:
            - email
            - areal
            - arealIdentifier
            - contactAllowed
          properties:
            email:
              type: string
              example: 'a@b.com'
            areal:
              $ref: '#/components/schemas/Areal'
            arealIdentifier:
              type: string
            types:
              type: array
              items:
                $ref: '#/components/schemas/RestrictionType'

    SituationType:
      type: object
      description: "This object allows to categorize Situations into high level crysis."
      properties:
        id:
          type: string
          example: "54759eb3c090d83494e2d804"
        name:
          type: string
          description: "Classifier."
          example: "Pandemie"
        description:
          type: string
          example: "Ausbruch einer Krankheit. Betrifft den gesamten Globus"
        media:
          type: string
          example: "virus.png"

    Situation:
      type: object
      description: "A Situation is a current crysis."
      properties:
        id:
          type: string
          example: "5eaf148a0d077d75108087d3"
        typeId:
          type: string
          description: "Reference to SituationType"
          example: "54759eb3c090d83494e2d804"
        name:
          type: string
          description: "Describes the situation; like a title"
          example: "Corona/Covid-19"
        startDate:
          type: string
          format: date
          description: "Start of the situation/crysis"
          example: "2020-01-01"
        endDate:
          type: string
          format: date
          nullable: true
          description: "End of situation/crysis"
          example: "2020-12-31"
        active:
          type: boolean
          default: true
          description: "Toggles the afffectness of a situation/crysis. False will not trigger any action to a system/user (e. g. push notification)"

    SituationMessageType:
      type: object
      description: "Classifies a SituationMessage into a type. Has impact to icon, coloring, severity of messages their handling"
      properties:
        id:
          type: string
          example: "5eaf17692c1f4e9671ec7111"
        name:
          type: string
          description: "Speakable type of Type"
          example: "Restrictive Instruktion"
        media:
          type: string
          description: "Icon"
          example: "exclamation-mark.svg"
        color:
          type: string
          description: "Provides the possibility to annotate messages/headers with MessageType-based color"
          example: "orange"

    SituationMessage:
      type: object
      description: "Represents an instruction or an information to recipients or systems."
      properties:
        id:
          type: string
          example: "5eaf18e47badf06d7f3fbcc0"
        situationId:
          type: string
          description: "Sorts the message to a situation/crysis"
          example: "5eaf148a0d077d75108087d3"
        messageTypeId:
          type: string
          description: "Classifies the Message as type of e.g. Restrictive-Instruction; inherits color schema, severity, etc."
          example: "5eaf17692c1f4e9671ec7111"
        title:
          type: string
          description: "Quick information/abstract about the message"
          example: "Wearing a face mask is mandatory!"
        message:
          type: string
          description: "Whole information. Fully formatable."
          example: "By start of April, 20th 2020 you have to wear a face mask in supermarkets and all shop-alike stores."
        abstract:
          type: string
          description: "Short text (excerpt) from the whole message"
          example: "Please wear a face mask in shopping stores"
        icon:
          type: string
          description: "Icon"
          example: "mask.svg"
        documents:
          type: array
          items:
            $ref: '#/components/schemas/SituationReference'
        areaOfEffect:
          type: array
          description: "A list of all GeoJson-Ids, where the Situation is taking place/is affected"
          items:
            type: string
        status:
          $ref: '#/components/schemas/SituationMessageStatus'
        lastModifed:
          type: string
          format: date-time
          description: "Timestamp of last modification"
          example: "2020-05-03T12:02:30.000Z"
        version:
          type: number
          description: "Every change increments the version. Full history possible"

    SituationReference:
      type: object
      description: "References to source of information"
      properties:
        title:
          type: string
          description: "Allows to describe the source/reference"
          example: "How to wear a face mask?"
        type:
          $ref: '#/components/schemas/SituationReferenceType'
        classifier:
          $ref: '#/components/schemas/SituationReferenceClassifier'
        source:
          type: string
          description: "points to the source"
          example: "http://darfichraus.de/mask-mandatory.pdf"


    SituationReferenceType:
      description: "Type of reference to build type-based-action"
      type: string
      enum:
        - URL
        - FILE
        - PICTURE
        - VIDEO
        - VOICE
        - OTHER

    SituationReferenceClassifier:
      description: "Classifies the reference as type of"
      type: string
      enum:
        - ATTACHMENT
        - SOURCE
        - OTHER

    SituationMessageStatus:
      description: "Get information about the status"
      type: string
      enum:
        - DRAFT
        - APPROVED
        - REVOKED
        - OTHER


    BaseEntity:
      type: object
      discriminator:
        propertyName: Entity
      properties:
        id:
          type: string
        created:
          type: string
          format: date-time
          description: 'when this entity has been created'
        modified:
          type: string
          format: date-time
          description: 'when this entity has been last modified'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: 'API-KEY'
      description: 'Api-Key needed to authenticate requests'
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
